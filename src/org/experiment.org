#+TITLE: Experiment
#+SETUPFILE: ~/apps/org-html-themes/setup/theme-readtheorg.setup
#+export_file_name: ../docs/experiment.html

* Experiment

  #+NAME: experiment-cls
  #+BEGIN_SRC typescript
    export abstract class Experiment {
        name : string;
        shortName : string;
        repoURL : URL;
        tag: string;
        link : URL;
        labName: Label;

        constructor(name: string, shortName: string, repoURL: URL,
                    tag: string, labName: Label, indexfn='index.html') {
            this.name = name;
            this.shortName = shortName;
            this.repoURL = repoURL;
            this.tag = tag;
            this.labName = labName;
        }

        describe() : void {
            console.log(` ${this.name}, ${this.shortName}, ${this.link}`);
        }

        abstract build() : Experiment;
        abstract deploy() : Experiment;
    }
  #+END_SRC
  
* IIITH Experiments

  #+NAME: iiith-exp
  #+BEGIN_SRC typescript :noweb yes
  export class IIITHExperiment extends Experiment {
      constructor(name: string, shortName: string, repoURL: URL, tag: string, labName: Label) {
          super(name, shortName, repoURL, tag, labName, 'exp.html');
      }
           
      <<build-iiith>>
      <<deploy-iiith>>
  }
  #+END_SRC

  
** Build

   #+NAME: build-iiith
   #+BEGIN_SRC typescript
     build() : Experiment {
         console.log(chalk`   {magenta ${figures.bullet}}  Building {blue ${this.shortName}}`);

         const localExpRoot = path.resolve('build/experiments').toString();
         const localExp = path.resolve(localExpRoot, this.shortName).toString();
         const content_repo = new URL(`${this.repoURL.pathname}/content-html`, this.repoURL);
         shell.rm('-rf', localExp);
         shell.mkdir('-p', localExp);
         shell.cd(localExp);
         shell.exec(`git clone ${content_repo.toString()}`);
         shell.cd('content-html');
         shell.exec(`git fetch --all`);
         shell.exec(`git checkout ${this.tag}`);
         shell.cp('config.mk.sample', 'config.mk');
         shell.exec('make -k clean');
         shell.exec('make -k clean-infra');
         shell.exec('make -k all');
         shell.cd(`../../../../`);
         console.log(chalk`      {green ${figures.tick}}  Done`);
         return this;
     }
   #+END_SRC

** Deploy

   #+NAME: deploy-iiith
   #+BEGIN_SRC typescript
     deploy() : Experiment {
        console.log(`Deploying ${this.shortName}`);
        const localExpRoot = path.resolve('build/experiments').toString();
        const localExp = path.resolve(localExpRoot, this.shortName).toString();
        const copyTo = `/var/www/html/${this.labName.toPathName()}/exp/${this.shortName}/`;
        shell.rm('-rf', copyTo);
        shell.mkdir('-p', copyTo);
        shell.cp('-rf', `${localExp}/content-html/build/*`, copyTo);
        return this;
     }
   #+END_SRC
* Tangle :noexport:

  #+BEGIN_SRC typescript :noweb yes :tangle ../code/experiment.ts
    import * as chalk from 'chalk';
    import * as boxen from 'boxen';
    import * as figures from 'figures';
    import {URL} from 'url';
    import * as Handlebars from 'handlebars';
    import * as fs from 'fs-extra';
    import * as shell from 'shelljs';
    import * as path from 'path';

    import {firstToUpper, Label} from './utility';
    
    <<experiment-cls>>
    <<iiith-exp>>

  #+END_SRC


* Example

#+BEGIN_SRC typescript

    shell.config.silent = true;
    
    const ex = new IIITHExperiment('Data Structures - 1',
                              'ds1',
                               new URL('https://gitlab.com/vlead-projects/experiments/ds/bubble-sort/content-html'),
                               'ds');
    ex.describe();
    ex.build();
    ex.deploy();

#+END_SRC  
