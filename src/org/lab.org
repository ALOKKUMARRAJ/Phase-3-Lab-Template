#+TITLE: Lab
#+SETUPFILE: ~/apps/org-html-themes/setup/theme-readtheorg.setup
#+export_file_name: ../docs/lab.html

* Introduction

  A Lab is a defined by the following attributes:

  |--------------+--------------------+----------------------------------------|
  | *Attribute*  | *Role*             | *Description*                          |
  |--------------+--------------------+----------------------------------------|
  | /Name/       | Display, Analytics | Name of the lab                        |
  |--------------+--------------------+----------------------------------------|
  | /Discipline/ | Display, Analytics | Discipline that this lab belong to     |
  |--------------+--------------------+----------------------------------------|
  | /College/    | Analytics          | College that developed the lab         |
  |--------------+--------------------+----------------------------------------|
  | /Phase/      | Analytics          | Virtual Labs phase this lab belong to  |
  |--------------+--------------------+----------------------------------------|
  | /Host Name/  | Publishing         | Host-name of the server that will      |
  |              |                    | server the generated lab pages. This   |
  |              |                    | host-name is just used to generate the |
  |              |                    | link for the Lab and not for actual    |
  |              |                    | deployment                             |
  |--------------+--------------------+----------------------------------------|
  | /Pages/      | Generation         | List of pages in the lab UI.           |
  |--------------+--------------------+----------------------------------------|

* Lab Class

** Implementation :noexport:
  #+NAME: lab-class
  #+BEGIN_SRC typescript :noweb yes

    export class Lab {

        static skeleton_fn: string = 'template/skeleton.handlebars';
        static pagesConfig: PageConfig[] = [
            {
                heading: 'Introduction',
                template: contentKind('Introduction'),
                outfn: 'Introduction'
            },
            {
                heading: 'Objective',
                template: contentKind('Objective'),
                outfn: 'Objective'
            },
            {
                heading: 'List of Experiments',
                template: contentKind('ListOfExperiments'),
                outfn: 'ListOfExperiments'
            },
            {
                heading: 'List of Experiments',
                template: contentKind('NestedListOfExperiments'),
                outfn: 'ListOfExperiments'
            },
            {
                heading: 'TargetAudience',
                template: contentKind('TargetAudience'),
                outfn: 'TargetAudience'
            },
            {
                heading: 'CourseAlignment',
                template: contentKind('CourseAlignment'),
                outfn: 'CourseAlignment'
            },
            {
                heading: 'Feedback',
                template: contentKind('Feedback'),
                outfn: 'Feedback'
            }
        ];

        name: Label;
        localPath: string;
        discipline: Label;
        college: string;
        phase: number;
        host: string;
        experiments: Experiment[];
        rawPageContents: any;
        options?: any;

        <<constructor>>
        <<describe>>
        <<lab-url>>
        <<generate-page>>
        <<generate-pages>>
        <<summarize>>
        <<build-lab>>
        <<build-experiments>>
        <<deploy>>
        <<update-sources>>
    }

  #+END_SRC

  #+NAME: constructor
  #+BEGIN_SRC typescript
        constructor(name: Label, localPath: string, discipline: Label, college: string, 
                    phase: number, host: string, experiments: Experiment[], 
                    rawPageContents: any, options: any) {
            this.name = name;
            this.localPath = localPath;
            this.discipline = discipline;
            this.college = college;
            this.phase = phase;
            this.host = host;
            this.experiments = experiments;
            this.rawPageContents = rawPageContents;
            this.options = options;
        }

        version(level: string) : string {
            shell.cd(path.resolve(this.localPath));
            let tag = shell.exec(`git tag -l`);
            let [major, minor, patch] = 'v1.0.0'.slice(1).split('.').map(parseFloat);

            if (level === 'major'){
                return `v${major+1}.${minor}.${patch}`;
            }            
            if (level === 'minor'){
                return `v${major}.${minor+1}.${patch}`;
            }            
            if (level === 'patch'){
                return `v${major}.${minor}.${patch+1}`;
            }
            shell.cd(process.cwd());
        }
  #+END_SRC

** Describe

   Summary of the lab.  This is useful to show information of a lab on
   the terminal.
   
   #+NAME: describe
   #+BEGIN_SRC typescript
     describe() : void {
	 const head = chalk`{italic {yellow LAB INFO} }`;
	 const ln = chalk`{bold Lab Name}   :  ${this.name.toString()}`;
	 const d = chalk`{bold Discipline} :  ${this.discipline.toString()}`;
	 const p = chalk`{bold Phase}      :  ${this.phase}`;
	 const u = chalk`{bold URL}        :  ${this.url()}`;

	 console.log(boxen(`${head}\n\n${ln}\n${d}\n${p}\n${u}`, {padding: 1, margin: 1, borderColor: 'cyan'}));
     }
   #+END_SRC

  Contents of a Lab:

  + Introduction
  + Objective
  + List of Experiments
  + Target Audience
  + Course Alignment
  + Feedback

  Any of these content fields can be made optional

** User Interface
   
   *Type* : Browser based GUI
   *Artefact* : Collection of HTML documents

   The uer interface for 
   
* Lab Url

  A lab url is generated from =host= and =name= of the lab.

  =http://<host>/<lab-name>=

  #+NAME: lab-url
  #+BEGIN_SRC typescript
    url() : URL {
	return (new URL(this.name.toPathName(), this.host));
    }
  #+END_SRC

* Page
  
  #+NAME: page-ifc
  #+BEGIN_SRC typescript :noweb yes
    export type ContentKind = 'Introduction'
        | 'Objective'
        | 'ListOfExperiments'
        | 'NestedListOfExperiments'
        | 'TargetAudience'
        | 'CourseAlignment'
        | 'Feedback';

    export function contentKind(c: string) : ContentKind {
        switch(c) {
            case 'Introduction':
                return 'Introduction'; 
            case 'Objective':
                return 'Objective';
            case 'ListOfExperiments':
                return 'ListOfExperiments'; 
            case 'NestedListOfExperiments':
                return 'NestedListOfExperiments';
            case 'TargetAudience':
                return 'TargetAudience';
            case 'CourseAlignment':
                return 'CourseAlignment';
            case 'Feedback':
                return 'Feedback';
            default:
                throw Error('INVALID_CONTENT_TYPE');
        }
    }

    export interface Content {
        kind: ContentKind,
        data: any
    }
    
    <<intro-ca>>
    <<loe-ca>>
    <<obj-ca>>
    <<ta-ca>>
    <<cal-ca>>
    <<fb-ca>>

    export interface PageConfig {
        heading: string;
        template: ContentKind;
        outfn: string;
    }

  #+END_SRC
  

   
** Content Adaptors

   
*** Introduction

    #+NAME: intro-ca
    #+BEGIN_SRC typescript
      export function introductionContent(data: any) : Content {
          return {
              kind: 'Introduction',
              data: data
          };
      }

    #+END_SRC

*** List Of Experiments

    #+NAME: loe-ca
    #+BEGIN_SRC typescript
      export function listOfExperimentsContent(data: any) : Content {
          if (data.experiments) {
              data.experiments = data.experiments.map( (e: any) => {
                  e.link = `${e['short-name']}.html`;       
                  return e;
              });
              return {
                  kind: 'ListOfExperiments',
                  data: data
              };
          }
          else {
              data.experimentSections = data.experimentSections.map( (es: any) => {
                  es.experiments = es.experiments.map( (e: any) => {
                      e.link = `${e['short-name']}.html`;       
                      return e;
                  });
                  return es;
              });
              return {
                  kind: 'NestedListOfExperiments',
                  data: data
              };
          }
      }
    #+END_SRC

*** Objective
    
    #+NAME: obj-ca
    #+BEGIN_SRC typescript
    export function objectiveContent(data: any) : Content {
        return {
            kind: 'Objective',
            data: data
        };
    }
    #+END_SRC

*** Target Audience

    #+NAME: ta-ca
    #+BEGIN_SRC typescript
      export function targetAudienceContent(data: any) : Content {
          return {
              kind: 'TargetAudience',
              data: data
          };
      }
    #+END_SRC


*** Course Alignment

    #+NAME: cal-ca
    #+BEGIN_SRC typescript
      export function courseAlignmentContent(data: any) : Content {
          return {
              kind: 'CourseAlignment',
              data: data
          };
      }

    #+END_SRC


*** Feedback

    #+NAME: fb-ca
    #+BEGIN_SRC typescript
      export function feedbackContent(data: any) : Content {
          return {
              kind: 'Feedback',
              data: data
          };
      }

    #+END_SRC


    
* Utilities
  
  Convert first character of given word to uppercase.
  
  #+NAME: first-to-upper
  #+BEGIN_SRC typescript
    export function firstToUpper(w: string) : string {
	// converts first character of given word to uppercase.
	// computer => Computer
	return w[0].toUpperCase()+w.slice(1);
    }
  #+END_SRC

** Label

   #+NAME: label
   #+BEGIN_SRC typescript :noweb yes
       export class Label {

           text: string;

           constructor(text: string) {
               //Label.validateLabel(text);
               this.text = text;
           }
      
           <<validate-label>>
           <<to-string>>
           <<to-path-name>>
       }

   #+END_SRC

   #+NAME: validate-label
   #+BEGIN_SRC typescript
     static validateLabel(text: string) : void {

	 // casing validation
	 if (text.search(/^[a-z]/g) === 0 || text.search(/ [a-z]/g) > 0) {
	     console.log(chalk`\n {red {bold ERROR ( LGE001 ) :}} {bold ${text}} is not a valid label`);
	     console.log(chalk` {green {bold Fix :}} ${text} ${figures.arrowRight} ${text.split(' ').map(firstToUpper).join(' ')}\n`);
	     throw Error('INVALID_LAB_DESCRIPTOR');
	 }
     }
   #+END_SRC

   #+NAME: to-string
   #+BEGIN_SRC typescript
     toString () : string {
	 return this.text;
     }
   #+END_SRC

*** Path Name Formatting

   Formatting applied to a Label that converts the given label to path
   name.

  
**** Conversion rules

    n
    1. Convert everything to lowercase
    2. Remove Leading and Trailing Whitespaces
    3. Remove long hyphen (for compatibility with Data Structures lab name)
    4. Replace all whitespace with single hyphen

**** Example

     #+BEGIN_EXAMPLE
       Natural Language Processing ==> natural-language-processing
       Data Structures – 1 ==> data-structures-1
     #+END_EXAMPLE


**** Implementation

     #+NAME: to-path-name
     #+BEGIN_SRC typescript
       toPathName() : string {
           return this.text.toLowerCase().trim().replace(/–/g, '').replace(/ +/g, '-');
       }

     #+END_SRC


* Generate Page

  #+NAME: generate-page
  #+BEGIN_SRC typescript

    getContent(kind: ContentKind, src: object) : Content {
        switch(kind) {
            case contentKind('Introduction'):
                return introductionContent(src);
            case contentKind('ListOfExperiments'):
                return listOfExperimentsContent(src);
            case contentKind('NestedListOfExperiments'):
                return listOfExperimentsContent(src);
            case contentKind('Objective'):
                return objectiveContent(src);
            case contentKind('CourseAlignment'):
                return courseAlignmentContent(src);
            case contentKind('TargetAudience'):
                return targetAudienceContent(src);
            case contentKind('Feedback'):
                return feedbackContent(src);
            default:
                throw Error('INVLID_CONTENT_KIND');
        }
    }



    page(cfg: PageConfig) : void {
        const data = this.getContent(cfg.template, this.rawPageContents).data;

        const content = Handlebars.compile(
            fs.readFileSync(`template/${cfg.template}.handlebars`, 'utf-8')
        )(data);

        const html = Handlebars.compile(fs.readFileSync(Lab.skeleton_fn, 'utf-8'))
        ({name: this.name,
          discipline: this.discipline,
          college: this.college,
          phase: this.phase,
          pageHeading: cfg.heading,
          content: content,
          hasObjective: this.rawPageContents.hasObjective,
          enable_analytics: false});
        fs.ensureFileSync(path.resolve(this.localPath, `src/lab/${cfg.outfn}.html`));
        fs.writeFileSync(path.resolve(this.localPath, `src/lab/${cfg.outfn}.html`), html, 'utf-8');
    }
  #+END_SRC


* From Descriptor

  #+NAME: from-descriptor
  #+BEGIN_SRC typescript
    export function fromDescriptor(fn: string) : Lab {
        const ld: LabDescriptor = loadLabDescriptor(fn);
        const name: Label = new Label(ld.lab);
        const localPath: string = path.dirname(fn);
        const discipline: Label = new Label(ld.broadArea.name);
        const college: string = ld.collegeName;
        const phase: number = ld.phase;
        const host: string = ld.baseUrl;
        const rawContents: any = { introduction: ld.introduction,
                                   objective: ld.objective,
                                   hasObjective: (ld.objective ? true : false),
                                   experiments: ld.experiments,
                                   experimentSections: ld.experimentSections,
                                   targetAudience: ld.targetAudience,
                                   courseAlignment: ld.courseAlignment,
                                   feedback: {}
                                 };
        const experiments: Experiment[] = loadExperiments(ld);
        const options: any = { enable_analytics: false,
                               hasObjective: (ld.objective ? true : false),
                               isListNested: (ld.experimentSections ? true : false),
                             };
        return (new Lab(name, localPath, discipline, college, phase, host,
                        experiments, rawContents, options));
    }

    function loadExperiments(ld: LabDescriptor) : Experiment[] {
        if (ld.experimentSections) {
            return ld.experimentSections
                .map((es: any) => es.experiments)
                .flat()
                .map((e: any) => {
                    return (new IIITHExperiment(e.name, e['short-name'],
                                                new URL(e.repo), e.tag, new Label(ld.lab)));
                });
        }
        else {
            return ld.experiments
                .map((e: any) => {
                    return (new IIITHExperiment(e.name, e['short-name'], 
                                                new URL(e.repo), e.tag, new Label(ld.lab)));
                });
        }
    }
  #+END_SRC

* Generate Pages

  #+NAME: generate-pages
  #+BEGIN_SRC typescript
    generatePages() : Lab {
        
        //const dest = this.name.toPathName();

        const dest = this.localPath;

        fs.copySync('build/lab-structure', `${dest}`);   
        Lab.pagesConfig.filter((cfg: PageConfig) => {
            if ((cfg.template === contentKind('Objective')) && !(this.options.hasObjective)) {
                return false;
            }
            if ((cfg.template === contentKind('NestedListOfExperiments')) && !(this.options.isListNested)) {
                return false;
            }
            if ((cfg.template === contentKind('ListOfExperiments')) && (this.options.isListNested)) {
                return false;
            }
            return true;
        }).forEach((pc: PageConfig) => {
            this.page(pc);
        });
        return this;
    }

  #+END_SRC

* Build Lab

  #+NAME: build-lab
  #+BEGIN_SRC typescript
    buildLab() : Lab {
        console.log(chalk`{cyan ${figures.circleDouble}}  Building Lab Sources`);
        const lp = this.localPath;
        shell.cd(lp);
        shell.exec('make all');
        shell.exec(`cd ${process.cwd()}`);
        console.log(chalk`    {green ${figures.tick}}  Lab Sources built successfully`);
        return this;
    }
  #+END_SRC
* Summarize

  #+NAME: summarize
  #+BEGIN_SRC typescript
    summarize() : Lab {
        const head = chalk`{italic {yellow LAB INFO} }`;
        const ln = chalk`{bold Lab Name}   :  ${this.name.toString()}`;
        const d = chalk`{bold Discipline} :  ${this.discipline.toString()}`;
        const p = chalk`{bold Phase}      :  ${this.phase}`;
        const u = chalk`{bold URL}        :  ${this.url()}`;    
        console.log(boxen(`${head}\n\n${ln}\n${d}\n${p}\n${u}`, {padding: 1, margin: 1, borderColor: 'cyan'}));
        return this;
    }

  #+END_SRC


* Build Experiments

  #+NAME: build-experiments
  #+BEGIN_SRC typescript
    buildExperiments() : Lab {
        console.log(chalk`\n{cyan ${figures.circleDouble}}  Building Experiments :: {yellow This may take a while}\n`);
        this.experiments.forEach((e) => e.build().deploy());
        return this;
    }
  #+END_SRC


* Deploy

  #+NAME: deploy
  #+BEGIN_SRC typescript
    deploy() : Lab {
        console.log('Deploying Lab');
        
        const lp = this.localPath;
        const labDest = path.resolve('/var/www/html/', this.name.toPathName());

        shell.mkdir('-p', labDest);
        shell.cp('-r', path.resolve(this.localPath, path.resolve(lp, `build/*`)), labDest);

        console.log(chalk`  {green Copied Lab to  to ${labDest}}`);
        return this;
    }
  #+END_SRC


* Update Sources

  Once the lab sources are generated, we copy the sources to the
  target repository and create a new tag.  This tag is incremented
  automatically.

  args: 

  major, minor, patch.
  
  #+NAME: update-sources
  #+BEGIN_SRC typescript
    updateSources(level: string) : Lab {
        shell.exec(`cd ${path.resolve(this.localPath)}`);
        console.log('Updating Sources');
        console.log();
        // insert tag in descriptor
        shell.exec(`git add src/`);
        shell.exec(`git add lab-descriptor.json`);
        shell.exec(`git commit -m '${this.version(level)}'`);
        shell.exec(`git tag -a '${this.version(level)}' -m '${this.version(level)}'`);
        shell.exec(`git push origin '${this.version(level)}'`);
        //shell.exec(`cd ${process.cwd()}`);
        return this;
    }
  #+END_SRC


* Tangle :noexport:
  
  #+BEGIN_SRC js :noweb yes :tangle ../code/utility.ts
  import * as chalk from 'chalk';
  import * as boxen from 'boxen';
  import * as figures from 'figures';

  <<label>>
  <<first-to-upper>>
  #+END_SRC

  #+BEGIN_SRC js :noweb yes :tangle ../code/lab.ts
  import * as chalk from 'chalk';
  import * as boxen from 'boxen';
  import * as figures from 'figures';
  import {URL} from 'url';
  import * as Handlebars from 'handlebars';
  import * as fs from 'fs-extra';
  import * as shell from 'shelljs';
  import * as path from 'path';

  import {firstToUpper, Label} from './utility';
  import {LabDescriptor, loadLabDescriptor} from './labdescriptor';
  import {IIITHExperiment, Experiment} from './experiment';
  
  
  <<page-ifc>>
  <<lab-class>>

  <<from-descriptor>>
  #+END_SRC


project_root
  /package.json
  /src
  /src/org
  /src/code
  /src/docs
  /src/test
  /src/tsconfig.json
  /build/index.js
  /build/page-templates
  /build/lab-structure
  /build/config.json

if you are a developer, there is a different process, you need to run make etc.
if you are a user, just use npm
